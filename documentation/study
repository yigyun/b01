Group 설정 org.zerock 패키지

PRG 패턴
유저가 POST 작업 요청 -> 컨트롤러를 통해 처리 후 다른 경로로 이동,

HttpServlet을 상속받은 클래스 객체는 서블릿 컨테이너가 관리한다.
톰캣같은 WAS에서 알아서 객체 관리해주고 멀티스레드 관리해준다.

HttpServletRequest, HttpServletResponse의 주요 기능 들 생각하기.

MVC 패턴 구조에서 모델을 서비스(로직), 영속(데이터) 부분으로 나눌 수 있다.

DTO는 계층이나 객체간의 데이터 교환에 사용한다. 자바 빈즈 형태로 구성한다.
기본적인 DTO 규칙
	- 생성자가 없거나 반드시 파라미터가 없는 생성자 함수를 가짐.
	- 속성은 private
	- getter setter 제공 with lombok
만약 소규모 애플리케이션의 경우 그냥 내부에 static class로 DTO 만들어도댐 근데 이거는 한정적으로 사용할 경우만 참고하기.


서비스 객체는 DTO와 달리 CRUD 기능들 같은 것을 다룸.

각종 EL(Expression Language) JSTL, 타임리프, 스프링 데이터 등 생각하기. 근데 굳이 EL 외울 필요는 없고 필요할 때 찾아서 사용하기.

DB는 의존성 추가하기, Data source에서 내 DB 설정해두기. 이거하면 properties나 yml에 데이터베이스 정보 없어도댐.

Connection은 반드시 종료해서 커넥션 풀로 반환되어야 한다.
try-with-resources 기억하기.
Statement도 반드시 종료해줘야함.

DAO는 데이터를 전문적으로 처리하는 객체로 DB에 오고가는 객체를 의미하며 VO 단위로 처리한다.

롬복의 @Cleanup 을 사용하면 close를 보장한다.

보통 개발 시 로그는 Info 이하의 레벨, 운영 시에는 Error나 Warn
톰캣이 자동으로 생성하는 쿠키 JSESSIONID,

직접 쿠키 생성할 때 값은 URL 인코딩된 문자열로 저장해야함.

생성자 주입

loose coupling, 느슨한 결합을 해라. 인터페이스 쓰라는 뜻.
@Primary, @Qualifier


RedirectAttributes 중요 메소드
addAttribute - 리다이렉트할 때 쿼리 스트링이 되는 값
addFlashAttribute - 일회용으로 데이터 전달하고 삭제되는 값
Flash를 사용하면 URL에 보이지 않는다.

반환타입
일반적으로 SSR의 경우 void, String 반환
JSON 사용시 ResponseEntity 타입 반환
void는 상황에 관계없이 일정한 화면을 보여주는 경우 사용

스프링 MVC에서 예외처리!!
@ControllerAdvice 사용하기
이 어노테이션도 컴포넌트 스캔 내장.
해당 클래스의 메소드에는 @ExceptionHandler로 처리가 가능하다.

범용적인 예외처리하는 방법 - Exception 클래스로 그냥 다 뽑아내는거
개발이 아니라 운영경우에는 에러 페이지로 이동시킨다.

@ResponseStatus를 이용하면 404 에러에 해당하는 화면도 지정가능.

DTO를 VO로 VO를 DTO로 변환하는 작업을 처리하기 위해 ModelMapper 설정을 이용한다.

부트스트랩, 머터리얼 같은 것을 통해 웹 화면 디자인 하기.

교재와 다르게 사용하고 나중에 추가할 부분도 고려하기.

@Vaild, BindingResult로 유효성 검증하기.
보통 바인딩에 문제가 생기면 addFlashAttribute로 처리해서 리다이렉트 시키기.
검증 결과는 가능하면 자바스크립트에서 처리하는 방식이 현재 선호되고 있음.

페이징 처리로 성능 개선 고민하기.
페이지 응답에서 제네릭을 이용하는 이유: 나중에 다른 종류 객체도 페이징할때 재사용하기 위해서 공통적인 응답으로 만든다.
보통 페이징에서 목록 1~10, 11~20 이런거 할때 end값을 통해 하는게 편함.
엔드값을 구하고 빼기로 start 지점을 찾는것이 쉽다. 현재 페이지 값으로
페이지 번호 할때 부트스트랩 Pagination 컴포넌트 쓰기.

필터링은 특정 범주, 범위의 값으로 걸러내기.
검색 부분은 어떤 키워드를 통해 검색처리.
항상 검색은 경우의 수를 먼저 생각하기.

-- 스프링 부트 --
부트를 이용하는 시점부터는 직접 코드로 따라가면서 주석으로 공부 흔적을 남겼음.

OneToMany, ManyToOne
이거를 결정할 때, Many가 종속적인지 아닌지에 따라서 결정해야 할 거 같음
만약 One에 종속적이면, 즉 게시물에 무조건 Many가 다 나타나야 하는 이미지같은 경우는 OneToMany로 충분함.
그런데 댓글 처럼 각각의 독립적 성격을 띄는 Many라면 ManyToOne이 적합함.
근데 OneToMany는 항상 N+1 문제를 고려하자.

엔티티를 DTO로 변환하는 방법
1) ModelMapper
2) Projections
이외에 객체안의 Set과 같은 중첩 구조를 처리하는 경우에는 튜플을 이용해서 DTO로 변환하는 방식이 편리하다.
ModelMapper는 단순한 객체 구조를 다른 타입 객체로 만드는 것에 편리하지만, 다양한 처리를 해야할 경우에는 오히려 더 복잡하기 때문에 변환 메소드를 따로 만드는 게 좋다.
